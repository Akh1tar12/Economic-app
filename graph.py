import turtle
def graph3():
    turtle.clearscreen()
    object=turtle.Screen()
    t=turtle.Turtle()
    t.hideturtle()
    t.speed("fastest")
    #t.pensize(3)
    #print("enter the radious")
    r=250
    t.right(90)
    t.penup()
    t.forward(175)
    t.pendown()
    t.left(90)


    t.fillcolor('green')
    t.begin_fill()
    t.circle(r)

    t.end_fill()
    #t.reset()

    ##t.penup()
    ##t.forward()
    ##t.shape("square")
    t.left(90)
    ##t.forward(160)
    t.penup()
    t.forward(r)
    #t.degrees(45)
    t.setheading(45)
    t.forward(r)
    #t.setheading(135)

    #t.setpos(0,0)
    t.write("EXPENDITURE",font=("Verdana",10, "normal"))
    t.left(135)

    t.pendown()
    t.fillcolor('yellow')
    t.begin_fill()

    #turtle.write("EXPENDITURE", font=("Verdana",15, "normal"))

    import math
    math.sqrt(2)

    t.forward((math.sqrt(2))*r)
    t.write("INCOME",align='right',font=("Verdana",10,"normal"))

    t.left(90)

    t.forward((math.sqrt(2))*r)
    t.write("CONSUMPTION ",align='right',font=("Verdana",10,"normal"))
    t.left(90)
    t.forward((math.sqrt(2))*r)
    t.write("  PRODUCTION",align='LEFT',font=("Verdana",10,"normal"))

    t.left(90)
    t.forward((math.sqrt(2)*r))
    t.end_fill()


    t.left(90)
    t.forward(((math.sqrt(2))*r)/5)
    t.left(90)
    t.up()
    t.forward(20)
    t.write("  SQUARE OF STABILITY ",align='RIGHT',font=("Verdana",10,"normal"))
    t.end_fill()

    t.right(180)
    t.forward(20)
    t.right(90)
    t.forward(((math.sqrt(2))*r)/5)
    t.right(90)

    t.forward(((math.sqrt(2))*r))
    t.left(180)
    t.forward(20)
    t.left(90)
    t.forward(((math.sqrt(2))*r)/5)
    t.write("  SQUARE OF STABILITY ",align='RIGHT',font=("Verdana",10,"normal"))

    t.left(90)
    t.forward(20)
    t.left(90)
    t.forward(((math.sqrt(2))*r)/5)

    t.left(135)
    t.penup()
    t.forward(r)
    t.left(135)
    t.forward(r)

    t.forward(30)
    t.right(90)

    t.pensize(4)
    t.forward(((math.sqrt(2))*r)/3)
    t.write("  SPHERE OF ECONOMY ",align='LEFT',font=("Verdana",15,"normal"))
    t.right(90)
    t.right(180)

    t.forward(50)
    t.write("ECONOMIC INTERACTION",font=("Verdana",15,"normal"))
    t.hideturtle()

def graph4():
    turtle.clearscreen()
    object=turtle.Screen().bgcolor('light green')
    t=turtle.Turtle()
    t.hideturtle()
    t.speed("fastest")

    r=250
    t.penup()
    t.right(90)

    t.forward(200)
    t.pendown()
    t.left(90)


    t.fillcolor('yellow')
    t.begin_fill()
    t.circle(r)

    t.end_fill()

    t.begin_fill()
    t.left(90)

    t.penup()
    t.forward(r)

    t.setheading(45)
    t.forward(r)
    t.setheading(135)



    t.write("EXPENDITURE \n (-)",font=("Verdana",10, "normal"))
    t.left(135)

    t.pendown()
    t.fillcolor()

    t.begin_fill()
    t.fillcolor('orange')

    import math
    t.forward(((math.sqrt(2))*r)) 
    t.right(90) 
    t.forward(((math.sqrt(2))*r)/2)  
    t.right(90) 
    t.forward(((math.sqrt(2))*r)) 
    t.right(90)  
    t.forward(((math.sqrt(2))*r)/2) 
    t.end_fill()

    t.left(180)

    t.forward(((math.sqrt(2))*r)/2)
    #t.stamp()

    t.penup()
    t.left(180)
    #t.stamp()
    t.left(180)
    t.pendown()
    t.fillcolor('blue')
    t.begin_fill()
    t.forward(((math.sqrt(2))*r)/2)
    t.write("INCOME \n (+)",align='right',font=("Verdana",10,"normal"))

    t.left(90)
    t.fillcolor('blue')

    t.forward((math.sqrt(2))*r)
    t.write("CONSUMPTION     \n (-)   ",align='right',font=("Verdana",10,"normal"))
    t.left(90)
    t.forward(((math.sqrt(2))*r)/2)
    #t.stamp()
    t.end_fill()
    t.penup()
    t.forward(((math.sqrt(2))*r)/2)
    t.left(180)
    t.forward(((math.sqrt(2))*r)/2)
    #t.stamp()
    t.left(180)
    t.forward(((math.sqrt(2))*r)/2)
    t.write("      PRODUCTION \n      (+)",align='LEFT',font=("Verdana",10,"normal"))

    t.left(90)
    t.forward((math.sqrt(2)*r))

    t.left(90)
    t.forward(((math.sqrt(2))*r)/5)
    t.left(90)
    t.up()
    t.forward(35)
    t.write("STABILITY OF\nATMOSPHERE",align="center",font=("Verdana",10,"normal"))

    t.right(180)
    t.forward(20)
    t.right(90)
    t.forward(((math.sqrt(2))*r)/5)
    t.right(90)

    t.forward(((math.sqrt(2))*r))
    t.left(180)
    t.forward(20)
    t.left(90)
    t.forward(((math.sqrt(2))*r)/1.5)
    t.write("STABILITY OF\n VOLUME",align="right",font=("Verdana",10,"normal"))

    t.left(180)
    t.forward(((math.sqrt(2))*r)/1.5)

    t.left(135)
    t.up()
    t.forward(r)
    t.left(135)
    t.forward(r+((math.sqrt(2))*r)/5)
    #t.down()
    t.left(90)

    t.write( "VERTICAL  DIVISION  OF ECONOMY",align="center",font=("Verdana",15,"normal"))

    t.left(90)
    t.forward(((math.sqrt(2))*r)/5)
    length=(r-(math.sqrt(2)*(r/2)))-5
    i=0
    #t.pensize('normal')
    def graph(length,unit):
        while(1):
            t.pensize(2)
            if(length<unit):
                 break
            t.pendown()
            t.fd(5)
            unit=unit+5
            if(length<unit):
                 break
            t.penup()
            t.fd(5)
            unit=unit+5
    unit=0
    t.up()
    graph(length,unit)
    t.dot(10)
    t.left(90)
    t.fd(5)
    t.left(180)
    t.color('black')
    t.stamp()
    t.fd(10)
    t.left(180)
    t.stamp()
    t.fd(5)
    t.right(90)

    t.up()
    t.fd(math.sqrt(2)*r)
    t.dot(7)
    t.left(90)
    t.fd(5)
    t.left(180)
    t.stamp()
    t.fd(10)
    t.left(180)
    t.stamp()
    t.fd(5)
    t.right(90)

    t.up()
    graph(length,unit)
    t.left(180)
    t.up() 
    t.fd(r)
    t.left(90)
    t.fd((math.sqrt(2)*(r/2)))
    t.dot(7)
    t.left(90)
    t.fd(5)
    t.left(180)
    t.stamp()
    t.fd(10)
    t.left(180)
    t.stamp()
    t.fd(5)

    t.right(90)

    t.up()
    graph(length,unit)
    t.up()
    t.fd(10)
    t.left(180)
    d=r+r
    t.fd(d-length)
    t.dot(7)

    t.left(90)
    t.fd(5)
    t.left(180)
    t.stamp()
    t.fd(10)
    t.left(180)
    t.stamp()
    t.fd(5)
    t.right(90)
    t.fd(5)

    t.up()
    graph(length,unit)

def graph6():
    turtle.clearscreen()
    object=turtle.Screen().bgcolor('light green')
    t=turtle.Turtle()
    t.hideturtle()
    t.speed("fastest")

    r=250
    t.right(90)
    t.up()
    t.forward(200)


    t.pendown()
    t.left(90)


    t.fillcolor('yellow')
    t.begin_fill()
    t.circle(r)

    t.end_fill()

    t.begin_fill()
    t.left(90)

    t.penup()
    t.forward(r)

    t.setheading(45)
    t.forward(r)

    t.left(135)
    import math
    math.sqrt(2)
    t.fillcolor('orange')
    t.begin_fill()
    t.fd((math.sqrt(2))*r/2)
    t.left(90)
    t.fd((math.sqrt(2))*r/2)
    t.left(90)
    t.fd((math.sqrt(2))*r/2) 
    t.end_fill()

    t.right(90)
    t.fillcolor('green')
    t.begin_fill()
    t.fd((math.sqrt(2))*r/2)
    t.right(90)
    t.fd((math.sqrt(2))*r/2)
    t.right(90)
    t.fd((math.sqrt(2))*r/2)
    t.right(90)
    t.fd((math.sqrt(2))*r/2)
    t.end_fill()

    t.backward((math.sqrt(2))*r/2)
    #t.right(180)
    t.right(90)

    t.backward((math.sqrt(2))*r/2)
    t.right(90) 
    t.backward((math.sqrt(2))*r/2)
    t.fillcolor('red')
    t.fd((math.sqrt(2))*r/2)
    t.begin_fill()
    t.fd((math.sqrt(2))*r/2)
    t.left(90)
    t.fd((math.sqrt(2))*r/2)
    t.left(90)
    t.fd((math.sqrt(2))*r/2)
    t.left(90)
    t.fd((math.sqrt(2))*r/2)
    #t.end_fill()
    t.left(90)
    t.fd((math.sqrt(2))*r/2)
    t.end_fill()

    t.left(90)
    t.fd((math.sqrt(2))*r/2)  
    t.fillcolor('blue')
    t.begin_fill()
    t.fd((math.sqrt(2))*r/2)
    t.left(90)
    t.fd((math.sqrt(2))*r/2)
    t.left(90)
    t.fd((math.sqrt(2))*r/2)
    t.left(90)
    t.fd((math.sqrt(2))*r/2)
    t.end_fill()
    t.color('black')
    #t.stamp()
    length=(r-(math.sqrt(2)*(r/2)))
    def graph(length,unit):
        while(1):
            t.pensize(2)
            if(length<unit):
                break
            t.pendown()
            t.fd(5)
            unit=unit+5
            if(length<unit):
                break
            t.penup()
            t.fd(5)
            unit=unit+5
    unit=0

    t.left(90)
    t.pendown()
    t.fd((math.sqrt(2))*r/2) 
    t.left(90)
    t.fd((math.sqrt(2))*r)
    t.left(90)
    t.fd((math.sqrt(2))*r)
    t.left(90)
    t.fd((math.sqrt(2))*r)
    t.left(90)
    t.fd((math.sqrt(2))*r/2)
    t.left(90)
    t.fd((math.sqrt(2))*r)
    t.up()
    t.backward(((math.sqrt(2))*r/2))
    t.left(90)
    t.fd((math.sqrt(2))*r/2)
    t.left(180)
    t.pd()
    t.fd((math.sqrt(2))*r)
    t.up()
    t.left(90)
    t.fd((math.sqrt(2))*r/2)

    t.write("\n     PRODUCTION\n\t(+) ",align='right',font=("Verdana",10,"normal"))

    t.left(90)
    t.fd((math.sqrt(2))*r/2)
    t.left(90)
    t.fd((math.sqrt(2))*r/2)
    t.right(90)
    t.fd((math.sqrt(2))*r/2-30)
    t.right(90)
    t.fd((math.sqrt(2))*r/2)
    t.write("\n\n  EXPENDITURE \n\t(-)",align='right',font=("Verdana",10, "normal"))
    t.backward((math.sqrt(2))*r/2)
    t.left(180)
    t.fd((math.sqrt(2))*r/2)
    t.write("    \n\n INCOME\n    (+)",align='left',font=("Verdana",10,"normal"))
    t.backward((math.sqrt(2))*r/2)
    t.left(90)
    t.fd((math.sqrt(2))*r-30)
    t.right(90)
    t.fd((math.sqrt(2))*r/2)
    t.write("    CONSUMPTION    \n \t(-)",align='left',font=("Verdana",10,"normal"))

    t.right(90)
    t.fd((math.sqrt(2))*r/2-5)
    t.stamp()
    t.fd(5)
    t.dot(7)
    t.fd(5)
    t.left(180)
    t.stamp()
    t.fd(5)
    t.right(90)
    graph(length,unit)
    d=r+r
    t.up()
    t.backward(d+2)
    graph(length,unit)


    t.dot(7)
    t.left(90)
    t.fd(5)
    t.left(180)
    t.stamp()
    t.fd(10)

    t.up
    t.left(180)
    t.stamp()
    t.backward(5)


    t.right(90)
    t.up()
    t.fd(r-length-1)
    t.left(90)
    t.fd((math.sqrt(2))*r/2+10)
    t.dot(7)
    t.left(90)
    t.fd(5)
    t.left(180)
    t.stamp()
    t.fd(10)
    t.left(180)
    t.stamp()
    t.fd(5)
    t.right(90)
    graph(length,unit)

    t.up()
    t.backward(d-length)
    t.dot(7)
    t.left(90)
    t.fd(5)
    t.left(180)
    t.stamp()
    t.fd(10)
    t.left(180)
    t.stamp()
    t.fd(5)
    t.left(90)
    graph(length,unit)
    t.up()
    t.backward(d+60) 
    t.write("FOUR SQUARES OF ECONOMY",align='center',font=("Verdana",15,"normal"))


def graph5():
    turtle.clearscreen()
    object=turtle.Screen().bgcolor('light green')
    t=turtle.Turtle()
    t.hideturtle()
    t.speed("fastest")

    r=250

    t.right(90)
    t.up()
    t.forward(200)


    t.pendown()
    t.left(90)


    t.fillcolor('yellow')
    t.begin_fill()
    t.circle(r)

    t.end_fill()

    t.begin_fill()
    t.left(90)

    t.penup()
    t.forward(r)

    t.setheading(45)
    t.forward(r)

    t.write("EXPENDITURE \n     (-)",font=("Verdana",10, "normal"))
    t.left(135)

    t.pendown()
    t.begin_fill()
    t.fillcolor('orange')
    import math
    math.sqrt(2)
 
    t.forward((math.sqrt(2))*r)


    t.penup()
    t.left(90)
    t.forward(20)
    t.write("  \n\n\t\tMONETARY  STABILITY",align='left',font=("Verdana",10,"normal"))
    t.backward(20)
    t.right(90)
    t.pendown()


    t.write("    INCOME\n    (+)",align='right',font=("Verdana",10,"normal"))
    t.left(90)
    t.forward((math.sqrt(2))*r/2)
    #t.stamp()

    t.left(90)
    t.forward((math.sqrt(2))*r)
    t.left(90)
    t.forward((math.sqrt(2))*r/2)

    t.end_fill()
    t.left(180)
    t.up()

  
    t.begin_fill()

    t.forward((math.sqrt(2))*r/2)
    #t.stamp()

    t.fillcolor('blue')

    t.pendown()
    t.forward((math.sqrt(2))*r/2)

    t.write("\n     PRODUCTION\n\t(+) ",align='left',font=("Verdana",10,"normal"))

  
    t.right(90)
    t.pendown()
    t.forward((math.sqrt(2))*r)
    t.write("\t\t\t\t\t \t  PHYSICAL STABILITY",align='center',font=("Verdana",10,"normal"))

    t.write("    CONSUMPTION    \n \t(-)",align='right',font=("Verdana",10,"normal"))
    t.right(90)

    t.forward((math.sqrt(2))*r/2)
    #t.stamp()



    t.penup()
    t.right(90)

    t.forward((math.sqrt(2))*r)

    t.end_fill()
    t.left(90)
    #t.stamp()
    t.left(90)
    t.forward((math.sqrt(2))*r/2)
    t.left(90)
    t.forward(r+30)

    t.write("HORIZONTAL DIVISION OF ECONOMY",align='center',font=("Verdana",14,"normal"))

    t.up()
    t.left(180)
    t.forward(30+r-(math.sqrt(2))*r/2)

    t.color('black')
    t.left(90)
    t.backward(5) 
    t.stamp()
    t.fd(4)
    t.left(180)
    t.backward(4)
    t.stamp()
    t.fd(4)
    t.forward((math.sqrt(2))*r/2)

    t.left(90)
    t.forward((math.sqrt(2))*r/2)
    t.backward(4)

    t.stamp()
    t.fd(4)
    t.left(180)   
    t.backward(4)
    t.stamp()
    t.forward(4)

    t.left(180)
    t.forward((math.sqrt(2))*r/2)

    t.left(90)
    t.forward((math.sqrt(2))*r/2)
    t.backward(4)
    t.stamp()
    t.fd(4)
    t.left(180)
    t.backward(4)
    t.stamp()
    t.fd(4)
 
    t.left(180)
    t.forward((math.sqrt(2))*r/2)
    t.left(90)
    t.forward((math.sqrt(2))*r/2)
    t.backward(4)
    t.stamp()
    t.fd(4)
    t.left(180)
    t.backward(4)
    t.stamp()
    t.fd(4)
    t.left(90)
    length=(r-(math.sqrt(2)*(r/2)))

    def graph(length,unit):
        while(1):
            t.pensize(2)
            if(length<unit):
                break
            t.pendown()
            t.fd(5)
            unit=unit+5
            if(length<unit):
                break
            t.penup()
            t.fd(5)
            unit=unit+5
    unit=0
    t.dot(7)
    graph(length,unit)
    d=r+r
    t.up()
    t.backward(d)
    graph(length,unit)
    t.back(4)
    t.up()
    t.dot(7)

    t.fd(math.sqrt(2)*(r/2))
    t.left(90)
    t.fd(math.sqrt(2)*(r/2))
    t.dot(7)
    graph(length,unit)

    t.up()
    t.backward(d)
    graph(length,unit)
    t.backward(4)
    t.dot(7)

def graph7():
    turtle.clearscreen()
    object=turtle.Screen()
    t=turtle.Turtle()
    t.hideturtle()
    t.speed('fastest')



    t.right(90)
    t.penup()
    t.forward(200)
    t.pendown()

    t.left(90)

    r=250
    t.fillcolor('light green')
    t.begin_fill()
    t.circle(r)

    t.end_fill()

    t.left(90)
    t.penup()
    t.forward(r)

    t.right(45)
    t.forward(r)
    t.left(135)
    t.pendown()


    t.write("EXPENDITURE\n     (-)",font=("Verdana",10, "normal")) 
    import math
    t.forward((math.sqrt(2))*r)

    t.left(90)
    t.write("INCOME\n  (+)  ",align='right',font=("Verdana",10, "normal"))

    t.forward((math.sqrt(2))*r)
    t.write("CONSUMPTION    \n    (-)    ",align='right',font=("Verdana",10, "normal"))

    t.left(90)
    t.forward((math.sqrt(2))*r)

    t.left(90)
    t.write("      PRODUCTION\n     (+)",align='left',font=("Verdana",10, "normal"))
    t.forward((math.sqrt(2))*r)

    t.left(135)
    t.fillcolor('orange')
    t.begin_fill()
    t.forward(r)


    t.right(90)

    t.forward(r)
    t.end_fill()

    t.penup()
    t.left(180)

    t.forward(r)

    t.forward(r)
    t.pendown()
    t.fillcolor('blue')
    t.begin_fill()
    t.left(180)
    t.forward(r)


    t.left(90)

    t.forward(r)
    t.end_fill()
    t.left(180)

    t.penup()
    t.forward(r)


    t.fillcolor('green')
    t.begin_fill()
    t.right(90)
    t.right(180)

    t.forward(r)
    t.left(135)
    t.forward((math.sqrt(2))*r)
    t.left(135)
    t.forward(r) 
    t.end_fill()

    t.fillcolor('yellow')
    t.begin_fill()
    t.forward(r)
    t.right(135)
    t.forward((math.sqrt(2))*r)
    t.right(135)
    t.forward(r)
    t.end_fill()

    t.fillcolor('black')
    t.begin_fill()
    t.stamp()
    t.forward(r)
    t.left(180)
    t.forward(r)

    t.down()
    t.stamp()

    t.right(90)
    t.forward(r)
    t.left(180)
    t.forward(r)
    t.stamp()
    t.forward(r)
    t.left(180)
    t.forward(r)
    t.stamp()

    t.left(45)


    t.penup()
    t.forward(60)
    t.left(180)


    t.pendown()

    t.write("\nIdeal point\n of Balance ",align='right',font=("Verdana",10,"normal"))

    t.forward(40)
    t.stamp()

    t.penup()
    t.forward(20)
    t.left(90)

    t.forward(40)

    t.write("STABILITY \nOF VOLUME ",align='right',font=("Verdana",10,"normal"))

    t.left(180)
    t.forward(80)
    t.write("STABILITY \nOF ATMOSPHERE",align='left',font=("Verdana",10,"normal"))

    t.left(180)
    t.forward(40)

    t.right(45)

    t.forward(r)
    t.right(135)
    t.forward(20)
    t.right(90)
    t.forward(20)
    t.left(90)
    t.penup()

    t.write(" \t TRIANGLE OF MONETARY STABILITY",align='left',font=("Verdana",10,"normal"))

    t.right(90)
    t.left(180)
    t.forward(20)
    t.left(90)
    t.forward(20)
    t.left(90)

    t.forward(math.sqrt(2)*r-5)
    t.left(90)

    t.forward(40)
    t.write(" \t TRIANGLE OF \n \tPHYSICAL STABILITY",align='left',font=("Verdana",10,"normal"))
    t.fd(math.sqrt(2)*r/2-40)
    length=(r-math.sqrt(2)*r/2)
    t.right(90)

    t.forward(40+length)

    t.pensize(4)
    t.write("POINT OF BALANCE",align='center',font=("Verdana",15,"normal"))

def graph8():
    turtle.clearscreen()
    object=turtle.Screen()
    t=turtle.Turtle()
    t.hideturtle()
    t.speed("fastest")
    
    #circle
    t.penup()
    r=250
    t.goto(0,-r)
    t.pendown()
    t.begin_fill()
    t.circle(r)
    t.fillcolor('light yellow')
    t.end_fill()

    #inner_square
    t.penup()
    t.home()
    t.setheading(135)
    t.pendown()
    t.forward(r)
    pos1=t.position()
    xCoord=t.xcor()
    yCoord=t.ycor()
    t.home()
    angle=t.towards(-(xCoord),yCoord)
    t.setheading(angle)
    t.fd(r)
    pos2=t.position()
    distance=t.distance(pos1)
    angle=t.towards(pos1)
    t.setheading(angle)
    t.fd(distance)
    pos3=xCoord,-(yCoord)
    angle=t.towards(pos3)
    t.setheading(angle)
    t.fd(distance)
    angle=t.towards(0,0)
    t.setheading(angle)
    t.fd(r)
    pos4=(-xCoord),(-yCoord)
    angle=t.towards(pos4)
    t.setheading(angle)
    t.fd(r)
    angle=t.towards(pos2)
    t.setheading(angle)
    t.fd(distance)
    t.penup()
    t.goto(pos3)
    angle=t.towards(pos4)
    t.setheading(angle)
    t.pendown()
    t.fd(distance)
    t.penup()
    t.home()

    #triangles

    #upper blue triangle
    t.color("black")
    angle=t.towards(pos2)
    t.setheading(angle)
    t.begin_fill()
    t.fd(r)
    angle=t.towards(pos1)
    t.setheading(angle)
    t.fd(distance/2-3)
    t.stamp()
    t.fd(3)
    pos1to2=t.position()
    t.setheading(-90)
    t.pendown()
    t.fd(distance/2)
    t.fillcolor("dark blue")
    t.end_fill()

    #lower blue  triangle
    t.color("black")
    t.penup()
    t.begin_fill()
    angle=t.towards(pos3)
    t.setheading(angle)
    t.fd(r)
    angle=t.towards(pos4)
    t.setheading(angle)
    t.fd(distance/2-3)
    t.stamp()
    t.fd(3)
    pos4to3=t.position()
    t.pendown()
    angle=t.towards(pos1to2)
    t.setheading(angle)
    t.fd(distance/2)
    t.fillcolor("dark blue")
    t.end_fill()

    #upper light green triangle
    t.penup()
    t.color("black")
    t.begin_fill()
    angle=t.towards(pos1)
    t.setheading(angle)
    t.fd(r)
    angle=t.towards(pos1to2)
    t.setheading(angle)
    t.fd(distance/2-3)
    t.stamp()
    t.fd(3)
    angle=t.towards(pos4to3)
    t.setheading(angle)
    t.fd(distance/2)
    t.fillcolor("light green")
    t.end_fill()

    #lower light green triangle
    t.penup()
    t.color("black")
    t.begin_fill()
    angle=t.towards(pos4)
    t.setheading(angle)
    t.fd(r)
    angle=t.towards(pos3)
    t.setheading(angle)
    t.fd(distance/2-3)
    t.stamp()
    t.fd(3)
    angle=t.towards(pos1to2)
    t.setheading(angle)
    t.fd(distance/2)
    t.fillcolor("light green")
    t.end_fill()

    #upper orange triangle
    t.penup()
    t.color("black")
    angle=t.towards(pos2)
    t.setheading(angle)
    t.begin_fill()
    t.fd(r)
    angle=t.towards(pos4)
    t.setheading(angle)
    t.fd(distance/2-3)
    t.stamp()
    t.fd(3)
    pos2to4=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    t.fd(distance/2)
    t.fillcolor("orange")
    t.end_fill()

    #lower orange triangle
    t.penup()
    t.begin_fill()
    t.color("black")
    angle=t.towards(pos3)
    t.setheading(angle)
    t.fd(r)
    angle=t.towards(pos1)
    t.setheading(angle)
    t.fd(distance/2-3)
    t.stamp()
    t.fd(3)
    pos3to1=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    t.fd(distance/2)
    t.fillcolor("orange")
    t.end_fill()

    #upper dark green triangle
    t.penup()
    t.begin_fill()
    t.color("black")
    angle=t.towards(pos1)
    t.setheading(angle)
    t.fd(r)
    angle=t.towards(pos3)
    t.setheading(angle)
    t.fd(distance/2-3)
    t.stamp()
    t.fd(3)
    angle=t.towards(0,0)
    t.setheading(angle)
    t.fd(distance/2)
    t.fillcolor("dark green")
    t.end_fill()

    #lower dark green triangle
    t.penup()
    t.begin_fill()
    t.color("black")
    angle=t.towards(pos4)
    t.setheading(angle)
    t.fd(r)
    angle=t.towards(pos2)
    t.setheading(angle)
    t.fd(distance/2-3)
    t.stamp()
    t.fd(3)
    angle=t.towards(0,0)
    t.setheading(angle)
    t.fd(distance/2)
    t.fillcolor("dark green")
    t.end_fill()

    #upper dash line
    angle=t.towards(pos1to2)
    t.setheading(angle)
    t.color("black")
    t.fd(r)
    angle=t.towards(0,0)
    t.setheading(angle)
    unit=0
    while(1):
        if(r-(distance/2)<unit):
            break
        t.pendown()
        t.fd(5)
        unit=unit+5
        if(r-(distance/2)<unit):
             break
        t.penup()
        t.fd(5)
        unit=unit+5
    t.backward(2)
    t.dot(7)

    #left dash line
    t.home()
    angle=t.towards(pos3to1)
    t.setheading(angle)
    t.color("black")
    t.penup()
    t.fd(r)
    angle=t.towards(0,0)
    t.setheading(angle)
    unit=0
    while(1):
        if(r-(distance/2)<unit):
            break
        t.pendown()
        t.fd(5)
        unit=unit+5
        if(r-(distance/2)<unit):
             break
        t.penup()
        t.fd(5)
        unit=unit+5
    t.backward(2)
    t.dot(7)

    #lower dash line
    t.home()
    angle=t.towards(pos4to3)
    t.setheading(angle)
    t.color("black")
    t.penup()
    t.fd(r)
    angle=t.towards(0,0)
    t.setheading(angle)
    unit=0
    while(1):
        if(r-(distance/2)<unit):
            break
        t.pendown()
        t.fd(5)
        unit=unit+5
        if(r-(distance/2)<unit):
             break
        t.penup()
        t.fd(5)
        unit=unit+5
    t.backward(2)
    t.dot(7)

    #right dash line
    t.home()
    angle=t.towards(pos2to4)
    t.setheading(angle)
    t.color("black")
    t.penup()
    t.fd(r)
    angle=t.towards(0,0)
    t.setheading(angle)
    unit=0
    while(1):
        if(r-(distance/2)<unit):
            break
        t.pendown()
        t.fd(5)
        unit=unit+5
        if(r-(distance/2)<unit):
             break
        t.penup()
        t.fd(5)
        unit=unit+5
    t.backward(2)
    t.dot(7)

    #left top text
    t.penup()
    t.home()
    angle=t.towards(pos1)
    t.setheading(angle)
    t.fd(r)
    t.write("INCOME \n (+)",False,align="right",font=('verdana',10,'bold'))

    #left bottom text
    t.home()
    angle=t.towards(pos3)
    t.setheading(angle)
    t.fd(r)
    t.write("CONSUMPTION     \n (-)",False,align="right",font=('verdana',10,'bold'))

    #Top right text
    t.home()
    angle=t.towards(pos2)
    t.setheading(angle)
    t.fd(r)
    t.write("EXPENDITURE \n (-)",False,align="left",font=('verdana',10,'bold'))

    #Bottom text
    t.home()
    angle=t.towards(pos4)
    t.setheading(angle)
    t.fd(r)
    t.write("    PRODUCTION \n     (+)",False,align="left",font=('verdana',10,'bold'))

    #Title text
    t.home()
    angle=t.towards(pos4to3)
    t.setheading(angle)
    t.fd(r+50)
    t.write("BALANCING TRIANGLES OF ECONOMY",False,align="center",font=('verdana',15,'bold'))
    




def graph11(variation):
    def line(length,unit=0):
        while(1):
            t.pensize(3)
            if(length<unit):
                break
            t.pendown()
            t.fd(5)
            unit=unit+5
            if(length<unit):
                break
            t.penup()
            t.fd(5)
            unit=unit+5


    #ideal diagram        
    turtle.clearscreen()
    object=turtle.Screen()
    t=turtle.Turtle()
    t.hideturtle()
    t.speed("fastest")
    
    t.pensize(3)
    
    t.goto(0,0)
    length=200
    t.color('red')
    t.dot(7)
    #line(length)
    t.fd(length)
    t.dot(7)
    pos2to3=t.position()
    t.setheading(90)
    #line(length)
    t.fd(length)
    t.dot(7)
    xpos2=t.xcor()
    ypos2=t.ycor()
    angle=t.towards(0,0)
    t.setheading(angle)
    distance=t.distance(0,0)
    #line(distance)
    t.fd(distance)
    t.penup()
    t.goto(xpos2,ypos2)

    t.pendown()
    
    angle=t.towards(-xpos2,ypos2)
    t.setheading(angle)
    #line(length)
    t.fd(length)
    t.dot(7)
    pos1to2=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    #line(length)
    t.fd(length)
    t.penup()
    t.goto(pos1to2)
    
    t.pendown()
    
    angle=t.towards(-xpos2,ypos2)
    t.setheading(angle)
    #line(length)
    t.fd(length)
    t.dot(7)
    pos1=t.position()
    global x_act_pos1,y_act_pos1
    x_act_pos1=t.xcor()
    y_act_pos1=t.ycor()
    angle=t.towards(0,0)
    t.setheading(angle)
    #line(distance)
    t.fd(distance)
    t.penup()
    t.goto(-xpos2,ypos2)

    t.pendown()
    
    t.setheading(-90)
    #line(length)
    t.fd(length)
    t.dot(7)
    pos3to4=t.position()
    pos3to1=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    #line(length)
    t.fd(length)
    t.penup()
    t.goto(pos3to4)

    t.pendown()
    
    t.setheading(-90)
    #line(length)
    t.fd(length)
    pos3=t.position()
    global x_act_pos3,y_act_pos3
    x_act_pos3=t.xcor()
    y_act_pos3=t.ycor()
    t.dot(7)
    angle=t.towards(0,0)
    t.setheading(angle)
    #line(distance)
    t.fd(distance)
    t.penup()
    t.goto(pos3)

    t.pendown()
    
    angle=t.towards(-xpos2,-ypos2)
    t.setheading(angle)
    #line(length)
    t.fd(length)
    t.dot(7)
    pos4to3=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    #line(length)
    t.fd(length)
    t.penup()
    t.goto(pos4to3)

    t.pendown()
    
    angle=t.towards(xpos2,-ypos2)
    t.setheading(angle)
    #line(length)
    t.fd(length)
    t.dot(7)
    pos4=t.position()
    global x_act_pos4,y_act_pos4
    x_act_pos4=t.xcor()
    y_act_pos4=t.ycor()
    angle=t.towards(0,0)
    t.setheading(angle)
    #line(distance)
    t.fd(distance)
    t.penup()
    t.goto(pos4)

    t.pendown()
    
    angle=t.towards(pos2to3)
    t.setheading(angle)
    #line(length)
    t.fd(length)
    t.hideturtle()

    #actual diagram
    h=turtle.Turtle()
    h.speed("fastest")
    h.hideturtle()
    act_xpos2=(variation/100)*xpos2+xpos2
    h.penup()
    h.color("blue")
    h.goto(act_xpos2,ypos2)
    act_pos2=h.position()
    global x_act_pos2,y_act_pos2
    x_act_pos2=h.xcor()
    y_act_pos2=h.ycor()
    h.pendown()
    h.dot(7,"red")
    angle=h.towards(pos1)
    h.setheading(angle)
    length=h.distance(pos1)
    h.fd(length/2)
    act_pos1to2=h.position()
    global x_act_pos1to2,y_act_pos1to2
    x_act_pos1to2=h.xcor()
    y_act_pos1to2=h.ycor()
    h.dot(7,"red")
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(pos3)
    h.setheading(angle)
    length=h.distance(pos3)
    h.fd(length/2)
    h.dot(7,"red")
    act_pos3to1=h.position()
    global x_act_pos3to1,y_act_pos3to1
    x_act_pos3to1=h.xcor()
    y_act_pos3to1=h.ycor()
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(pos4)
    h.setheading(angle)
    length=h.distance(pos4)
    h.fd(length/2)
    h.dot(7,"red")
    act_pos4to3=h.position()
    #g11x_act_pos4to3=h.xcor()
    #g11y_act_pos4to3=h.ycor()
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(act_pos2)
    h.setheading(angle)
    length=h.distance(act_pos2)
    h.fd(length/2)
    h.dot(7,"red")
    act_pos2to4=h.position()
    global x_act_pos2to4,y_act_pos2to4
    x_act_pos2to4=h.xcor()
    y_act_pos2to4=h.ycor()
    h.fd(length/2)
    angle=h.towards(pos3)
    h.setheading(angle)
    distance=h.distance(pos3)
    h.fd(distance/2)
    h.dot(7,"red")
    act_posdist=h.position()
    global x_act_posdist,y_act_posdist
    x_act_posdist=h.xcor()
    y_act_posdist=h.ycor()
    h.fd(distance/2)
    h.penup()
    h.goto(pos1)
    angle=h.towards(pos4)
    h.setheading(angle)
    distance=h.distance(pos4)
    h.pendown()
    h.fd(distance/2)
    h.dot(7,"red")
    h.fd(distance/2)
    h.penup()
    h.goto(act_pos1to2)
    angle=h.towards(act_posdist)
    h.setheading(angle)
    h.goto(pos1)
    length=h.distance(pos3)
    h.goto(act_pos1to2)
    h.pendown()
    h.fd(length)
    h.dot(7,"red")
    global x_act_pos4to3,y_act_pos4to3
    x_act_pos4to3=h.xcor()
    y_act_pos4to3=h.ycor()
    h.penup()
    h.goto(act_pos2to4)
    angle=h.towards(act_posdist)
    h.setheading(angle)
    h.pendown()
    length=h.distance(pos3to1)
    h.fd(length)

    #text
    h.penup()
    h.color("black")
    h.goto(pos1)
    h.write("B ", align="right", font=("Verdana", 10, "normal"))
    h.goto(pos3to1)
    h.write("E ",align="right", font=("Verdana", 10, "normal"))
    h.goto(pos3)
    h.write("A ",align="right", font=("Verdana", 10, "normal"))
    h.goto(pos1to2)
    h.write("F ",align="right", font=("Verdana", 10, "normal"))
    h.goto(act_posdist)
    h.write("  I",align="left", font=("Verdana", 10, "normal"))
    h.goto(pos4to3)
    h.write("H ",align="right", font=("Verdana", 10, "normal"))
    h.goto(act_pos2)
    h.write(" C",align="left", font=("Verdana", 10, "normal"))
    h.goto(act_pos2to4)
    h.write(" G",align="left", font=("Verdana", 10, "normal"))
    h.goto(pos4)
    h.write(" D",align="left", font=("Verdana", 10, "normal"))


def graph12(variation):
    #dash line algorithm
    
    def line(length,unit=0):
        while(1):
            t.pensize(3)
            if(length<unit):
                break
            t.pendown()
            t.fd(5)
            unit=unit+5
            if(length<unit):
                break
            t.penup()
            t.fd(5)
            unit=unit+5

    #ideal diagram        
    turtle.clearscreen()
    object=turtle.Screen()
    t=turtle.Turtle()
    t.hideturtle()
    t.speed("fastest")
    t.goto(0,0)
    length=200
    t.color('red')
    t.dot(7)
    line(length)
    t.dot(7)
    pos2to3=t.position()
    t.setheading(90)
    line(length)
    t.dot(7)
    pos2=t.position()
    xpos2=t.xcor()
    ypos2=t.ycor()
    angle=t.towards(0,0)
    t.setheading(angle)
    distance=t.distance(0,0)
    line(distance)
    t.penup()
    t.goto(xpos2,ypos2)
    angle=t.towards(-xpos2,ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos1to2=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(length)
    t.penup()
    t.goto(pos1to2)
    angle=t.towards(-xpos2,ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos1=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(distance)
    t.penup()
    t.goto(-xpos2,ypos2)
    t.setheading(-90)
    line(length)
    t.dot(7)
    pos3to4=t.position()
    pos3to1=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(length)
    t.penup()
    t.goto(pos3to4)
    t.setheading(-90)
    line(length)
    pos3=t.position()
    t.dot(7)
    angle=t.towards(0,0)
    t.setheading(angle)
    line(distance)
    t.penup()
    t.goto(pos3)
    angle=t.towards(-xpos2,-ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos4to3=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(length)
    t.penup()
    t.goto(pos4to3)
    angle=t.towards(xpos2,-ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos4=t.position()
    xpos4=t.xcor()
    ypos4=t.ycor()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(distance)
    t.penup()
    t.goto(pos4)
    angle=t.towards(pos2to3)
    t.setheading(angle)
    line(length)
    t.hideturtle()

    #actual diagram
    h=turtle.Turtle()
    h.speed("fastest")
    h.hideturtle()
    act_xpos4=(variation/100)*xpos4+xpos4
    h.penup()
    h.color("blue")
    h.goto(act_xpos4,ypos4)
    act_pos4=h.position()
    h.pendown()
    h.dot(7,"red")
    angle=h.towards(pos2)
    h.setheading(angle)
    length=h.distance(pos2)
    h.fd(length/2)
    act_pos2to4=h.position()
    h.dot(7,"red")
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(pos1)
    h.setheading(angle)
    length=h.distance(pos1)
    h.fd(length/2)
    h.dot(7,"red")
    act_pos1to2=h.position()
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(pos3)
    h.setheading(angle)
    length=h.distance(pos3)
    h.fd(length/2)
    h.dot(7,"red")
    act_pos3to1=h.position()
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(act_pos4)
    h.setheading(angle)
    length=h.distance(act_pos4)
    h.fd(length/2)
    h.dot(7,"red")
    act_pos4to3=h.position()
    h.fd(length/2)
    angle=h.towards(pos1)
    h.setheading(angle)
    distance=h.distance(pos1)
    h.fd(distance/2)
    h.dot(7,"red")
    act_posdist=h.position()
    h.fd(distance/2)
    h.penup()
    h.goto(pos2)
    angle=h.towards(pos3)
    h.setheading(angle)
    distance=h.distance(pos3)
    h.pendown()
    h.fd(distance/2)
    h.dot(7,"red")
    h.fd(distance/2)
    h.penup()
    h.goto(act_pos4to3)
    angle=h.towards(act_posdist)
    h.setheading(angle)
    h.goto(pos1)
    length=h.distance(pos3)
    h.goto(act_pos4to3)
    h.pendown()
    h.fd(length)
    h.dot(7,"red")
    h.penup()
    h.goto(act_pos2to4)
    angle=h.towards(act_posdist)
    h.setheading(angle)
    h.pendown()
    length=h.distance(pos3to1)
    h.fd(length)


    #text
    h.penup()
    h.color("black")
    h.goto(pos1)
    h.write("B ", align="right", font=("Verdana", 10, "normal"))
    h.goto(pos3to1)
    h.write("E ",align="right", font=("Verdana", 10, "normal"))
    h.goto(pos3)
    h.write("A ",align="right", font=("Verdana", 10, "normal"))
    h.goto(pos1to2)
    h.write("F ",align="right", font=("Verdana", 10, "normal"))
    h.goto(act_posdist)
    h.write("  I",align="left", font=("Verdana", 10, "normal"))
    h.goto(pos4to3)
    h.write("H ",align="right", font=("Verdana", 10, "normal"))
    h.goto(pos2)
    h.write(" C",align="left", font=("Verdana", 10, "normal"))
    h.goto(act_pos2to4)
    h.write(" G",align="left", font=("Verdana", 10, "normal"))
    h.goto(pos4)
    h.write(" D",align="left", font=("Verdana", 10, "normal"))


def graph14(variation):
    #dash line algorithm
    def line(length,unit=0):
        while(1):
             t.pensize(3)
             if(length<unit):
                 break
             t.pendown()
             t.fd(5)
             unit=unit+5
             if(length<unit):
                 break
             t.penup()
             t.fd(5)
             unit=unit+5

    #ideal diagram        
    turtle.clearscreen()
    object=turtle.Screen()
    t=turtle.Turtle()
    t.hideturtle()
    t.speed("fastest")
    t.goto(0,0)
    length=200
    t.color('red')
    t.dot(7)
    line(length)
    t.dot(7)
    pos2to3=t.position()
    t.setheading(90)
    line(length)
    t.dot(7)
    pos2=t.position()
    xpos2=t.xcor()
    ypos2=t.ycor()
    angle=t.towards(0,0)
    t.setheading(angle)
    distance=t.distance(0,0)
    line(distance)
    t.penup()
    t.goto(xpos2,ypos2)
    angle=t.towards(-xpos2,ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos1to2=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(length)
    t.penup()
    t.goto(pos1to2)
    angle=t.towards(-xpos2,ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos1=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(distance)
    t.penup()
    t.goto(-xpos2,ypos2)
    t.setheading(-90)
    line(length)
    t.dot(7)
    pos3to4=t.position()
    pos3to1=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(length)
    t.penup()
    t.goto(pos3to4)
    t.setheading(-90)
    line(length)
    pos3=t.position()
    xpos3=t.xcor()
    ypos3=t.ycor()
    t.dot(7)
    angle=t.towards(0,0)
    t.setheading(angle)
    line(distance)
    t.penup()
    t.goto(pos3)
    angle=t.towards(-xpos2,-ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos4to3=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(length)
    t.penup()
    t.goto(pos4to3)
    angle=t.towards(xpos2,-ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos4=t.position()
    xpos4=t.xcor()
    ypos4=t.ycor()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(distance)
    t.penup()
    t.goto(pos4)
    angle=t.towards(pos2to3)
    t.setheading(angle)
    line(length)
    t.hideturtle()

    #actual diagram
    h=turtle.Turtle()
    h.speed("fastest")
    h.hideturtle()
    act_ypos3=(variation/100)*ypos3+ypos3
    h.penup()
    h.color("blue")
    h.goto(xpos3,act_ypos3)
    act_pos3=h.position()
    h.pendown()
    h.dot(7,"red")
    angle=h.towards(pos4)
    h.setheading(angle)
    length=h.distance(pos4)
    h.fd(length/2)
    act_pos4to3=h.position()
    h.dot(7,"red")
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(pos2)
    h.setheading(angle)
    length=h.distance(pos2)
    h.fd(length/2)
    h.dot(7,"red")
    act_pos2to4=h.position()
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(pos1)
    h.setheading(angle)
    length=h.distance(pos1)
    h.fd(length/2)
    h.dot(7,"red")
    act_pos1to2=h.position()
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(act_pos3)
    h.setheading(angle)
    length=h.distance(act_pos3)
    h.fd(length/2)
    act_pos3to1=h.position()
    h.dot(7,"red")
    act_pos3to1=h.position()
    h.fd(length/2)
    angle=h.towards(pos2)
    h.setheading(angle)
    distance=h.distance(pos2)
    h.fd(distance/2)
    h.dot(7,"red")
    act_posdist=h.position()
    h.fd(distance/2)
    h.penup()
    h.goto(pos1)
    angle=h.towards(pos4)
    h.setheading(angle)
    distance=h.distance(pos4)
    h.pendown()
    h.fd(distance/2)
    h.dot(7,"red")
    h.fd(distance/2)
    h.penup()
    h.goto(act_pos4to3)
    angle=h.towards(act_posdist)
    h.setheading(angle)
    length=h.distance(pos1to2)
    h.pendown()
    h.fd(length)
    h.dot(7,"red")
    h.penup()
    h.goto(act_pos3to1)
    angle=h.towards(act_posdist)
    h.setheading(angle)
    h.goto(pos1)
    length=h.distance(pos2)
    h.goto(act_pos3to1)
    h.pendown()
    h.fd(length)
    h.dot(7,"red")
  
    #text
    h.penup()
    h.color("black")
    h.goto(pos1)
    h.write("B ", align="right", font=("Verdana", 10, "normal"))
    h.goto(pos3to1)
    h.write("E ",align="right", font=("Verdana", 10, "normal"))
    h.goto(pos3)
    h.write("A ",align="right", font=("Verdana", 10, "normal"))
    h.goto(pos1to2)
    h.write("F ",align="right", font=("Verdana", 10, "normal"))
    h.goto(act_posdist)
    h.write("   I",align="left", font=("Verdana", 10, "normal"))
    h.goto(pos4to3)
    h.write("H ",align="right", font=("Verdana", 10, "normal"))
    h.goto(pos2)
    h.write(" C",align="left", font=("Verdana", 10, "normal"))
    h.goto(act_pos2to4)
    h.write(" G",align="left", font=("Verdana", 10, "normal"))
    h.goto(pos4)
    h.write(" D",align="left", font=("Verdana", 10, "normal"))


def graph15(variation):
    #dash line algorithm
    def line(length,unit=0):
        while(1):
             t.pensize(3)
             if(length<unit):
                 break
             t.pendown()
             t.fd(5)
             unit=unit+5
             if(length<unit):
                 break
             t.penup()
             t.fd(5)
             unit=unit+5

    #ideal diagram        
    turtle.clearscreen()
    object=turtle.Screen()
    t=turtle.Turtle()
    t.hideturtle()
    t.speed("fastest")
    t.goto(0,0)
    length=200
    t.color('red')
    t.dot(7)
    line(length)
    t.dot(7)
    pos2to3=t.position()
    t.setheading(90)
    line(length)
    t.dot(7)
    pos2=t.position()
    xpos2=t.xcor()
    ypos2=t.ycor()
    angle=t.towards(0,0)
    t.setheading(angle)
    distance=t.distance(0,0)
    line(distance)
    t.penup()
    t.goto(xpos2,ypos2)
    angle=t.towards(-xpos2,ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos1to2=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(length)
    t.penup()
    t.goto(pos1to2)
    angle=t.towards(-xpos2,ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos1=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(distance)
    t.penup()
    t.goto(-xpos2,ypos2)
    t.setheading(-90)
    line(length)
    t.dot(7)
    pos3to4=t.position()
    pos3to1=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(length)
    t.penup()
    t.goto(pos3to4)
    t.setheading(-90)
    line(length)
    pos3=t.position()
    xpos3=t.xcor()
    ypos3=t.ycor()
    t.dot(7)
    angle=t.towards(0,0)
    t.setheading(angle)
    line(distance)
    t.penup()
    t.goto(pos3)
    angle=t.towards(-xpos2,-ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos4to3=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(length)
    t.penup()
    t.goto(pos4to3)
    angle=t.towards(xpos2,-ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos4=t.position()
    xpos4=t.xcor()
    ypos4=t.ycor()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(distance)
    t.penup()
    t.goto(pos4)
    angle=t.towards(pos2to3)
    t.setheading(angle)
    line(length)
    t.hideturtle()

    #actual diagram
    h=turtle.Turtle()
    h.speed("fastest")
    h.hideturtle()
    act_xpos3=(variation/100)*xpos3+xpos3
    h.penup()
    h.color("blue")
    h.goto(act_xpos3,ypos3)
    act_pos3=h.position()
    h.pendown()
    h.dot(7,"red")
    angle=h.towards(pos1)
    h.setheading(angle)
    length=h.distance(pos1)
    h.fd(length/2)
    act_pos3to1=h.position()
    h.dot(7,"red")
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(pos2)
    h.setheading(angle)
    length=h.distance(pos2)
    h.fd(length/2)
    h.dot(7,"red")
    act_pos1to2=h.position()
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(pos4)
    h.setheading(angle)
    length=h.distance(pos4)
    h.fd(length/2)
    h.dot(7,"red")
    act_pos2to4=h.position()
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(act_pos3)
    h.setheading(angle)
    length=h.distance(act_pos3)
    h.fd(length/2)
    act_pos4to3=h.position()
    h.dot(7,"red")
    h.fd(length/2)
    angle=h.towards(pos2)
    h.setheading(angle)
    distance=h.distance(pos2)
    h.fd(distance/2)
    h.dot(7,"red")
    act_posdist=h.position()
    h.fd(distance/2)
    h.penup()
    h.goto(pos1)
    angle=h.towards(pos4)
    h.setheading(angle)
    distance=h.distance(pos4)
    h.pendown()
    h.fd(distance/2)
    h.dot(7,"red")
    h.fd(distance/2)
    h.penup()
    h.goto(act_pos4to3)
    angle=h.towards(act_posdist)
    h.setheading(angle)
    length=h.distance(pos1to2)
    h.pendown()
    h.fd(length)
    h.dot(7,"red")
    h.penup()
    h.goto(act_pos3to1)
    angle=h.towards(act_posdist)
    h.setheading(angle)
    length=h.distance(act_pos2to4)
    h.pendown()
    h.fd(length)
    h.dot(7,"red")

    #text
    h.penup()
    h.color("black")
    h.goto(pos1)
    h.write("B ", align="right", font=("Verdana", 10, "normal"))
    h.goto(pos3to1)
    h.write("E    ",align="right", font=("Verdana", 10, "normal"))
    h.goto(pos3)
    h.write("A       ",align="right", font=("Verdana", 10, "normal"))
    h.goto(pos1to2)
    h.write("F ",align="right", font=("Verdana", 10, "normal"))
    h.goto(act_posdist)
    h.write("      I",align="left", font=("Verdana", 10, "normal"))
    h.goto(pos4to3)
    h.write("  H ",align="left", font=("Verdana", 10, "normal"))
    h.goto(pos2)
    h.write(" C",align="left", font=("Verdana", 10, "normal"))
    h.goto(act_pos2to4)
    h.write(" G",align="left", font=("Verdana", 10, "normal"))
    h.goto(pos4)
    h.write(" D",align="left", font=("Verdana", 10, "normal"))


def graph16(variation):
    #dash line algorithm
    def line(length,unit=0):
        while(1):
             t.pensize(3)
             if(length<unit):
                 break
             t.pendown()
             t.fd(5)
             unit=unit+5
             if(length<unit):
                 break
             t.penup()
             t.fd(5)
             unit=unit+5

    #ideal diagram        
    turtle.clearscreen()
    object=turtle.Screen()
    t=turtle.Turtle()
    t.hideturtle()
    t.speed("fastest")
    t.goto(0,0)
    length=200
    t.color('red')
    t.dot(7)
    line(length)
    t.dot(7)
    pos2to3=t.position()
    t.setheading(90)
    line(length)
    t.dot(7)
    pos2=t.position()
    xpos2=t.xcor()
    ypos2=t.ycor()
    angle=t.towards(0,0)
    t.setheading(angle)
    distance=t.distance(0,0)
    line(distance)
    t.penup()
    t.goto(xpos2,ypos2)
    angle=t.towards(-xpos2,ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos1to2=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(length)
    t.penup()
    t.goto(pos1to2)
    angle=t.towards(-xpos2,ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos1=t.position()
    xpos1=t.xcor()
    ypos1=t.ycor()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(distance)
    t.penup()
    t.goto(-xpos2,ypos2)
    t.setheading(-90)
    line(length)
    t.dot(7)
    pos3to4=t.position()
    pos3to1=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(length)
    t.penup()
    t.goto(pos3to4)
    t.setheading(-90)
    line(length)
    pos3=t.position()
    xpos3=t.xcor()
    ypos3=t.ycor()
    t.dot(7)
    angle=t.towards(0,0)
    t.setheading(angle)
    line(distance)
    t.penup()
    t.goto(pos3)
    angle=t.towards(-xpos2,-ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos4to3=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(length)
    t.penup()
    t.goto(pos4to3)
    angle=t.towards(xpos2,-ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos4=t.position()
    xpos4=t.xcor()
    ypos4=t.ycor()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(distance)
    t.penup()
    t.goto(pos4)
    angle=t.towards(pos2to3)
    t.setheading(angle)
    line(length)
    t.hideturtle()

    #actual diagram
    h=turtle.Turtle()
    h.speed("fastest")
    h.hideturtle()
    act_xpos1=(variation/100)*xpos1+xpos1
    h.penup()
    h.color("blue")
    h.goto(act_xpos1,ypos1)
    act_pos1=h.position()
    h.pendown()
    h.dot(7,"red")
    angle=h.towards(pos3)
    h.setheading(angle)
    length=h.distance(pos3)
    h.fd(length/2)
    act_pos3to1=h.position()
    h.dot(7,"red")
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(pos4)
    h.setheading(angle)
    length=h.distance(pos4)
    h.fd(length/2)
    h.dot(7,"red")
    act_pos4to3=h.position()
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(pos2)
    h.setheading(angle)
    length=h.distance(pos2)
    h.fd(length/2)
    h.dot(7,"red")
    act_pos2to4=h.position()
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(act_pos1)
    h.setheading(angle)
    length=h.distance(act_pos1)
    h.fd(length/2)
    act_pos1to2=h.position()
    h.dot(7,"red")
    h.fd(length/2)
    angle=h.towards(pos4)
    h.setheading(angle)
    distance=h.distance(pos4)
    h.fd(distance/2)
    h.dot(7,"red")
    act_posdist=h.position()
    h.fd(distance/2)
    h.penup()
    h.goto(pos3)
    angle=h.towards(pos2)
    h.setheading(angle)
    distance=h.distance(pos2)
    h.pendown()
    h.fd(distance/2)
    h.dot(7,"red")
    h.fd(distance/2)
    h.penup()
    h.goto(act_pos1to2)
    angle=h.towards(act_posdist)
    h.setheading(angle)
    length=h.distance(pos4to3)
    h.pendown()
    h.fd(length)
    h.dot(7,"red")
    h.penup()
    h.goto(act_pos3to1)
    angle=h.towards(act_posdist)
    h.setheading(angle)
    length=h.distance(act_pos2to4)
    h.pendown()
    h.fd(length)
    h.dot(7,"red")

    #text
    h.penup()
    h.color("black")
    h.goto(pos1)
    h.write("B ", align="right", font=("Verdana", 10, "normal"))
    h.goto(pos3to1)
    h.write("E    ",align="right", font=("Verdana", 10, "normal"))
    h.goto(pos3)
    h.write("A  ",align="right", font=("Verdana", 10, "normal"))
    h.goto(pos1to2)
    h.write("F ",align="right", font=("Verdana", 10, "normal"))
    h.goto(act_posdist)
    h.write("      I",align="left", font=("Verdana", 10, "normal"))
    h.goto(pos4to3)
    h.write("  H ",align="left", font=("Verdana", 10, "normal"))
    h.goto(pos2)
    h.write(" C",align="left", font=("Verdana", 10, "normal"))
    h.goto(act_pos2to4)
    h.write(" G",align="left", font=("Verdana", 10, "normal"))
    h.goto(pos4)
    h.write(" D",align="left", font=("Verdana", 10, "normal"))


def graph17(variation):
    #dash line algorithm
    def line(length,unit=0):
        while(1):
             t.pensize(3)
             if(length<unit):
                 break
             t.pendown()
             t.fd(5)
             unit=unit+5
             if(length<unit):
                 break
             t.penup()
             t.fd(5)
             unit=unit+5

    #ideal diagram        
    turtle.clearscreen()
    object=turtle.Screen()
    t=turtle.Turtle()
    t.hideturtle()
    t.speed("fastest")
    t.goto(0,0)
    length=200
    t.color('red')
    t.dot(7)
    line(length)
    t.dot(7)
    pos2to3=t.position()
    t.setheading(90)
    line(length)
    t.dot(7)
    pos2=t.position()
    xpos2=t.xcor()
    ypos2=t.ycor()
    angle=t.towards(0,0)
    t.setheading(angle)
    distance=t.distance(0,0)
    line(distance)
    t.penup()
    t.goto(xpos2,ypos2)
    angle=t.towards(-xpos2,ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos1to2=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(length)
    t.penup()
    t.goto(pos1to2)
    angle=t.towards(-xpos2,ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos1=t.position()
    xpos1=t.xcor()
    ypos1=t.ycor()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(distance)
    t.penup()
    t.goto(-xpos2,ypos2)
    t.setheading(-90)
    line(length)
    t.dot(7)
    pos3to4=t.position()
    pos3to1=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(length)
    t.penup()
    t.goto(pos3to4)
    t.setheading(-90)
    line(length)
    pos3=t.position()
    xpos3=t.xcor()
    ypos3=t.ycor()
    t.dot(7)
    angle=t.towards(0,0)
    t.setheading(angle)
    line(distance)
    t.penup()
    t.goto(pos3)
    angle=t.towards(-xpos2,-ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos4to3=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(length)
    t.penup()
    t.goto(pos4to3)
    angle=t.towards(xpos2,-ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos4=t.position()
    xpos4=t.xcor()
    ypos4=t.ycor()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(distance)
    t.penup()
    t.goto(pos4)
    angle=t.towards(pos2to3)
    t.setheading(angle)
    line(length)
    t.hideturtle()

    #actual diagram
    h=turtle.Turtle()
    h.speed("fastest")
    h.hideturtle()
    act_ypos1=(variation/100)*ypos1+ypos1
    h.penup()
    h.color("blue")
    h.goto(xpos1,act_ypos1)
    act_pos1=h.position()
    h.pendown()
    h.dot(7,"red")
    angle=h.towards(pos2)
    h.setheading(angle)
    length=h.distance(pos2)
    h.fd(length/2)
    act_pos1to2=h.position()
    h.dot(7,"red")
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(pos4)
    h.setheading(angle)
    length=h.distance(pos4)
    h.fd(length/2)
    h.dot(7,"red")
    act_pos2to4=h.position()
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(pos3)
    h.setheading(angle)
    length=h.distance(pos3)
    h.fd(length/2)
    h.dot(7,"red")
    act_pos4to3=h.position()
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(act_pos1)
    h.setheading(angle)
    length=h.distance(act_pos1)
    h.fd(length/2)
    act_pos3to1=h.position()
    h.dot(7,"red")
    h.fd(length/2)
    angle=h.towards(pos4)
    h.setheading(angle)
    distance=h.distance(pos4)
    h.fd(distance/2)
    h.dot(7,"red")
    act_posdist=h.position()
    h.fd(distance/2)
    h.penup()
    h.goto(pos3)
    angle=h.towards(pos2)
    h.setheading(angle)
    distance=h.distance(pos2)
    h.pendown()
    h.fd(distance/2)
    h.dot(7,"red")
    h.fd(distance/2)
    h.penup()
    h.goto(act_pos1to2)
    angle=h.towards(act_posdist)
    h.setheading(angle)
    length=h.distance(pos4to3)
    h.pendown()
    h.fd(length)
    h.dot(7,"red")
    h.penup()
    h.goto(act_pos3to1)
    angle=h.towards(act_posdist)
    h.setheading(angle)
    length=h.distance(act_pos2to4)
    h.pendown()
    h.fd(length)
    h.dot(7,"red")

    #text
    h.penup()
    h.color("black")
    h.goto(pos1)
    h.write("B ", align="right", font=("Verdana", 10, "normal"))
    h.goto(pos3to1)
    h.write("E  ",align="right", font=("Verdana", 10, "normal"))
    h.goto(pos3)
    h.write("A  ",align="right", font=("Verdana", 10, "normal"))
    h.goto(pos1to2)
    h.write("F ",align="right", font=("Verdana", 10, "normal"))
    h.goto(act_posdist)
    h.write(" I",align="left", font=("Verdana", 10, "normal"))
    h.goto(pos4to3)
    h.write("  H ",align="left", font=("Verdana", 10, "normal"))
    h.goto(pos2)
    h.write(" C",align="left", font=("Verdana", 10, "normal"))
    h.goto(act_pos2to4)
    h.write(" G",align="left", font=("Verdana", 10, "normal"))
    h.goto(pos4)
    h.write(" D",align="left", font=("Verdana", 10, "normal"))


def graph10(variation=0):
    #dash line algorithm
    def line(length,unit=0):
        while(1):
             t.pensize(3)
             if(length<unit):
                 break
             t.pendown()
             t.fd(5)
             unit=unit+5
             if(length<unit):
                 break
             t.penup()
             t.fd(5)
             unit=unit+5

    #ideal diagram        
    turtle.clearscreen()
    object=turtle.Screen()
    t=turtle.Turtle()
    t.hideturtle()
    t.speed("fastest")
    t.goto(0,0)
    length=200
    t.color('red')
    t.dot(7)
    line(length)
    t.dot(7)
    pos2to4=t.position()
    t.setheading(90)
    line(length)
    t.dot(7)
    pos2=t.position()
    xpos2=t.xcor()
    ypos2=t.ycor()
    angle=t.towards(0,0)
    t.setheading(angle)
    distance=t.distance(0,0)
    line(distance)
    t.penup()
    t.goto(xpos2,ypos2)
    angle=t.towards(-xpos2,ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos1to2=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(length)
    t.penup()
    t.goto(pos1to2)
    angle=t.towards(-xpos2,ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos1=t.position()
    xpos1=t.xcor()
    ypos1=t.ycor()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(distance)
    t.penup()
    t.goto(-xpos2,ypos2)
    t.setheading(-90)
    line(length)
    t.dot(7)
    pos3to1=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(length)
    t.penup()
    t.goto(pos3to1)
    t.setheading(-90)
    line(length)
    pos3=t.position()
    xpos3=t.xcor()
    ypos3=t.ycor()
    t.dot(7)
    angle=t.towards(0,0)
    t.setheading(angle)
    line(distance)
    t.penup()
    t.goto(pos3)
    angle=t.towards(-xpos2,-ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos4to3=t.position()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(length)
    t.penup()
    t.goto(pos4to3)
    angle=t.towards(xpos2,-ypos2)
    t.setheading(angle)
    line(length)
    t.dot(7)
    pos4=t.position()
    xpos4=t.xcor()
    ypos4=t.ycor()
    angle=t.towards(0,0)
    t.setheading(angle)
    line(distance)
    t.penup()
    t.goto(pos4)
    angle=t.towards(pos2to4)
    t.setheading(angle)
    line(length)
    t.hideturtle()
      
    #actual diagram
    h=turtle.Turtle()
    h.hideturtle()
    h.speed("fastest")
    act_ypos2=(variation/100)*ypos2+ypos2
    h.penup()
    h.color("blue")
    h.goto(xpos2,act_ypos2)
    act_pos2=h.position()
    h.pendown()
    h.dot(7,"red")
    angle=h.towards(pos1)
    h.setheading(angle)
    length=h.distance(pos1)
    h.fd(length/2)
    act_pos1to2=h.position()
    h.dot(7,"red")
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(pos3)
    h.setheading(angle)
    length=h.distance(pos3)
    h.fd(length/2)
    h.dot(7,"red")
    act_pos3to1=h.position()
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(pos4)
    h.setheading(angle)
    length=h.distance(pos4)
    h.fd(length/2)
    h.dot(7,"red")
    act_pos4to3=h.position()
    h.fd(length/2)
    h.dot(7,"red")
    angle=h.towards(act_pos2)
    h.setheading(angle)
    length=h.distance(act_pos2)
    h.fd(length/2)
    act_pos2to4=h.position()
    h.dot(7,"red")
    h.fd(length/2)
    angle=h.towards(pos3)
    h.setheading(angle)
    distance=h.distance(pos3)
    h.fd(distance/2)
    h.dot(7,"red")
    act_posdist=h.position()
    h.fd(distance/2)
    h.penup()
    h.goto(pos1)    
    angle=h.towards(pos4)
    h.setheading(angle)
    distance=h.distance(pos4)
    h.pendown()
    h.fd(distance/2)
    h.dot(7,"red")
    h.fd(distance/2)
    h.penup()
    h.goto(act_pos1to2)
    angle=h.towards(act_posdist)
    h.setheading(angle)
    length=h.distance(pos4to3)
    h.pendown()
    h.fd(length)
    h.dot(7,"red")
    h.penup()
    h.goto(act_pos2to4)
    angle=h.towards(act_posdist)
    h.setheading(angle)
    length=h.distance(act_pos3to1)
    h.pendown()
    h.fd(length)
    h.dot(7,"red")

    #ideal circle
    h.color("red")
    h.penup()
    h.goto(0,0)
    angle=h.towards(pos2to4)
    h.setheading(angle)
    radius=h.distance(pos1)
    h.fd(radius)
    h.setheading(90)
    h.pendown()
    h.circle(radius)

    #actual ellipse
    h.penup()
    h.color("blue")
    h.goto(act_posdist)
    r1=h.distance(act_pos2)
    h.pendown()
    angle=h.towards(pos1)
    h.setheading(angle)
    h.goto(act_pos2)
    h.circle(r1)

    #required distances
    

def graph_values():
    def g10():
        global g10x_act_pos1,g10y_act_pos1
        global g10x_act_pos2,g10y_act_pos2
        global g10x_act_pos3,g10y_act_pos3
        global g10x_act_pos4,g10y_act_pos4
        global g10x_act_pos1to2,g10y_act_pos1to2
        global g10x_act_pos2to4,g10y_act_pos2to4
        global g10x_act_pos4to3,g10y_act_pos4to3
        global g10x_act_pos3to1,g10y_act_pos3to1
        global g10x_act_posdist,g10y_act_posdist


    def g12():
        global g12x_act_pos1,g12y_act_pos1
        global g12x_act_pos2,g12y_act_pos2
        global g12x_act_pos3,g12y_act_pos3
        global g12x_act_pos4,g12y_act_pos4
        global g12x_act_pos1to2,g12y_act_pos1to2
        global g12x_act_pos2to4,g12y_act_pos2to4
        global g12x_act_pos4to3,g12y_act_pos4to3
        global g12x_act_pos3to1,g12y_act_pos3to1
        global g12x_act_posdist,g12y_act_posdist

    def g13():
        global g13x_act_pos1,g13y_act_pos1
        global g13x_act_pos2,g13y_act_pos2
        global g13x_act_pos3,g13y_act_pos3
        global g13x_act_pos4,g13y_act_pos4
        global g13x_act_pos1to2,g13y_act_pos1to2
        global g13x_act_pos2to4,g13y_act_pos2to4
        global g13x_act_pos4to3,g13y_act_pos4to3
        global g13x_act_pos3to1,g13y_act_pos3to1
        global g13x_act_posdist,g13y_act_posdist

    def g14():
        global g14x_act_pos1,g14y_act_pos1
        global g14x_act_pos2,g14y_act_pos2
        global g14x_act_pos3,g14y_act_pos3
        global g14x_act_pos4,g14y_act_pos4
        global g14x_act_pos1to2,g14y_act_pos1to2
        global g14x_act_pos2to4,g14y_act_pos2to4
        global g14x_act_pos4to3,g14y_act_pos4to3
        global g14x_act_pos3to1,g14y_act_pos3to1
        global g14x_act_posdist,g14y_act_posdist

    def g15():
        global g15x_act_pos1,g15y_act_pos1
        global g15x_act_pos2,g15y_act_pos2
        global g15x_act_pos3,g15y_act_pos3
        global g15x_act_pos4,g15y_act_pos4
        global g15x_act_pos1to2,g15y_act_pos1to2
        global g15x_act_pos2to4,g15y_act_pos2to4
        global g15x_act_pos4to3,g15y_act_pos4to3
        global g15x_act_pos3to1,g15y_act_pos3to1
        global g15x_act_posdist,g15y_act_posdist

    def g16():
        global g16x_act_pos1,g16y_act_pos1
        global g16x_act_pos2,g16y_act_pos2
        global g16x_act_pos3,g16y_act_pos3
        global g16x_act_pos4,g16y_act_pos4
        global g16x_act_pos1to2,g16y_act_pos1to2
        global g16x_act_pos2to4,g16y_act_pos2to4
        global g16x_act_pos4to3,g16y_act_pos4to3
        global g16x_act_pos3to1,g16y_act_pos3to1
        global g16x_act_posdist,g16y_act_posdist

    def g17():
        global g17x_act_pos1,g17y_act_pos1
        global g17x_act_pos2,g17y_act_pos2
        global g17x_act_pos3,g17y_act_pos3
        global g17x_act_pos4,g17y_act_pos4
        global g17x_act_pos1to2,g17y_act_pos1to2
        global g17x_act_pos2to4,g17y_act_pos2to4
        global g17x_act_pos4to3,g17y_act_pos4to3
        global g17x_act_pos3to1,g17y_act_pos3to1
        global g17x_act_posdist,g17y_act_posdist

#-------------------------------------------------------graph11_coordinates_variables-------------------------------------------------------------------------------

x_act_pos1,y_act_pos1=0,0
x_act_pos2,y_act_pos2=0,0
x_act_pos3,y_act_pos3=0,0
x_act_pos4,y_act_pos4=0,0
x_act_pos1to2,y_act_pos1to2=0,0
x_act_pos2to4,y_act_pos2to4=0,0
x_act_pos4to3,y_act_pos4to3=0,0
x_act_pos3to1,y_act_pos3to1=0,0
x_act_posdist,y_act_posdist=0,0

#--------------------------------------------------------------------------------------------------------------------------------------------------------------------        
#graph10()


